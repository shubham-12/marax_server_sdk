# coding: utf-8

"""
    marax-server-sdk

    Marax Server SDK to send transactional events from client server to marax server  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Contact: team@marax.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from marax_server_sdk.configuration import Configuration


class RequestBodyProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'datetime',
        'marax_id': 'str',
        'client_id': 'str',
        'reward': 'RequestBodyPropertiesReward',
        'payment_mode': 'str',
        'total_cart_price': 'RequestBodyPropertiesTotalCartPrice',
        'total_discount': 'RequestBodyPropertiesTotalDiscount',
        'total_order_price': 'RequestBodyPropertiesTotalOrderPrice',
        'products': 'list[RequestBodyPropertiesProducts]',
        'fulfillment': 'list[RequestBodyPropertiesFulfillment]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'marax_id': 'maraxId',
        'client_id': 'clientId',
        'reward': 'reward',
        'payment_mode': 'paymentMode',
        'total_cart_price': 'totalCartPrice',
        'total_discount': 'totalDiscount',
        'total_order_price': 'totalOrderPrice',
        'products': 'products',
        'fulfillment': 'fulfillment'
    }

    def __init__(self, timestamp=None, marax_id=None, client_id=None, reward=None, payment_mode=None, total_cart_price=None, total_discount=None, total_order_price=None, products=None, fulfillment=None, local_vars_configuration=None):  # noqa: E501
        """RequestBodyProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._marax_id = None
        self._client_id = None
        self._reward = None
        self._payment_mode = None
        self._total_cart_price = None
        self._total_discount = None
        self._total_order_price = None
        self._products = None
        self._fulfillment = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if marax_id is not None:
            self.marax_id = marax_id
        if client_id is not None:
            self.client_id = client_id
        self.reward = reward
        if payment_mode is not None:
            self.payment_mode = payment_mode
        if total_cart_price is not None:
            self.total_cart_price = total_cart_price
        self.total_discount = total_discount
        self.total_order_price = total_order_price
        if products is not None:
            self.products = products
        if fulfillment is not None:
            self.fulfillment = fulfillment

    @property
    def timestamp(self):
        """Gets the timestamp of this RequestBodyProperties.  # noqa: E501


        :return: The timestamp of this RequestBodyProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RequestBodyProperties.


        :param timestamp: The timestamp of this RequestBodyProperties.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def marax_id(self):
        """Gets the marax_id of this RequestBodyProperties.  # noqa: E501


        :return: The marax_id of this RequestBodyProperties.  # noqa: E501
        :rtype: str
        """
        return self._marax_id

    @marax_id.setter
    def marax_id(self, marax_id):
        """Sets the marax_id of this RequestBodyProperties.


        :param marax_id: The marax_id of this RequestBodyProperties.  # noqa: E501
        :type: str
        """

        self._marax_id = marax_id

    @property
    def client_id(self):
        """Gets the client_id of this RequestBodyProperties.  # noqa: E501


        :return: The client_id of this RequestBodyProperties.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RequestBodyProperties.


        :param client_id: The client_id of this RequestBodyProperties.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def reward(self):
        """Gets the reward of this RequestBodyProperties.  # noqa: E501


        :return: The reward of this RequestBodyProperties.  # noqa: E501
        :rtype: RequestBodyPropertiesReward
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this RequestBodyProperties.


        :param reward: The reward of this RequestBodyProperties.  # noqa: E501
        :type: RequestBodyPropertiesReward
        """

        self._reward = reward

    @property
    def payment_mode(self):
        """Gets the payment_mode of this RequestBodyProperties.  # noqa: E501


        :return: The payment_mode of this RequestBodyProperties.  # noqa: E501
        :rtype: str
        """
        return self._payment_mode

    @payment_mode.setter
    def payment_mode(self, payment_mode):
        """Sets the payment_mode of this RequestBodyProperties.


        :param payment_mode: The payment_mode of this RequestBodyProperties.  # noqa: E501
        :type: str
        """

        self._payment_mode = payment_mode

    @property
    def total_cart_price(self):
        """Gets the total_cart_price of this RequestBodyProperties.  # noqa: E501


        :return: The total_cart_price of this RequestBodyProperties.  # noqa: E501
        :rtype: RequestBodyPropertiesTotalCartPrice
        """
        return self._total_cart_price

    @total_cart_price.setter
    def total_cart_price(self, total_cart_price):
        """Sets the total_cart_price of this RequestBodyProperties.


        :param total_cart_price: The total_cart_price of this RequestBodyProperties.  # noqa: E501
        :type: RequestBodyPropertiesTotalCartPrice
        """

        self._total_cart_price = total_cart_price

    @property
    def total_discount(self):
        """Gets the total_discount of this RequestBodyProperties.  # noqa: E501


        :return: The total_discount of this RequestBodyProperties.  # noqa: E501
        :rtype: RequestBodyPropertiesTotalDiscount
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this RequestBodyProperties.


        :param total_discount: The total_discount of this RequestBodyProperties.  # noqa: E501
        :type: RequestBodyPropertiesTotalDiscount
        """

        self._total_discount = total_discount

    @property
    def total_order_price(self):
        """Gets the total_order_price of this RequestBodyProperties.  # noqa: E501


        :return: The total_order_price of this RequestBodyProperties.  # noqa: E501
        :rtype: RequestBodyPropertiesTotalOrderPrice
        """
        return self._total_order_price

    @total_order_price.setter
    def total_order_price(self, total_order_price):
        """Sets the total_order_price of this RequestBodyProperties.


        :param total_order_price: The total_order_price of this RequestBodyProperties.  # noqa: E501
        :type: RequestBodyPropertiesTotalOrderPrice
        """

        self._total_order_price = total_order_price

    @property
    def products(self):
        """Gets the products of this RequestBodyProperties.  # noqa: E501


        :return: The products of this RequestBodyProperties.  # noqa: E501
        :rtype: list[RequestBodyPropertiesProducts]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this RequestBodyProperties.


        :param products: The products of this RequestBodyProperties.  # noqa: E501
        :type: list[RequestBodyPropertiesProducts]
        """

        self._products = products

    @property
    def fulfillment(self):
        """Gets the fulfillment of this RequestBodyProperties.  # noqa: E501


        :return: The fulfillment of this RequestBodyProperties.  # noqa: E501
        :rtype: list[RequestBodyPropertiesFulfillment]
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this RequestBodyProperties.


        :param fulfillment: The fulfillment of this RequestBodyProperties.  # noqa: E501
        :type: list[RequestBodyPropertiesFulfillment]
        """

        self._fulfillment = fulfillment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestBodyProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestBodyProperties):
            return True

        return self.to_dict() != other.to_dict()
